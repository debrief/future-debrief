name: 'VS Code Extension PR Preview'
description: 'Build and deploy VS Code extension PR preview'
inputs:
  pr_number:
    description: 'Pull request number'
    required: true
  pr_sha:
    description: 'Pull request SHA'
    required: true
  fly_api_token:
    description: 'Fly.io API token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'
        cache-dependency-path: vs-code/yarn.lock
    
    - name: Install dependencies
      shell: bash
      working-directory: vs-code
      run: yarn install --frozen-lockfile
    
    - name: Compile TypeScript
      shell: bash
      working-directory: vs-code
      run: yarn compile
    
    - name: Install vsce
      shell: bash
      working-directory: vs-code
      run: |
        yarn global add @vscode/vsce || yarn add @vscode/vsce
    
    - name: Package extension
      shell: bash
      working-directory: vs-code
      run: |
        if which vsce > /dev/null 2>&1; then
          vsce package --out extension.vsix
        else
          npx vsce package --out extension.vsix
        fi
        
        if [ -f extension.vsix ]; then
          echo "‚úÖ Extension packaged successfully"
          ls -la *.vsix
        else
          echo "‚ùå Extension packaging failed"
          exit 1
        fi
    
    - name: Setup Fly CLI
      uses: superfly/flyctl-actions/setup-flyctl@master
      
    - name: Generate app name and config
      id: config
      shell: bash
      working-directory: vs-code
      run: |
        PR_NUMBER="${{ inputs.pr_number }}"
        APP_NAME="pr-${PR_NUMBER}-futuredebrief"
        PREVIEW_URL="https://${APP_NAME}.fly.dev"
        
        echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
        echo "app_name=${APP_NAME}" >> $GITHUB_OUTPUT
        echo "preview_url=${PREVIEW_URL}" >> $GITHUB_OUTPUT
        
        sed "s/PR_APP_NAME_PLACEHOLDER/${APP_NAME}/g; s/PR_NUMBER_PLACEHOLDER/${PR_NUMBER}/g" \
          fly-template.toml > fly.toml
        
        echo "Generated fly.toml for app: ${APP_NAME}"
        cat fly.toml
    
    - name: Deploy to Fly.io
      id: deploy
      shell: bash
      working-directory: vs-code
      env:
        FLY_API_TOKEN: ${{ inputs.fly_api_token }}
      run: |
        APP_NAME="${{ steps.config.outputs.app_name }}"
        
        if ! flyctl apps list | grep -q "^${APP_NAME}"; then
          echo "Creating new app: ${APP_NAME}"
          flyctl apps create "${APP_NAME}" --org personal
        else
          echo "App ${APP_NAME} already exists, updating..."
        fi
        
        echo "Deploying to ${APP_NAME}..."
        echo "Starting deployment at $(date)"
        
        timeout 600 flyctl deploy --app "${APP_NAME}" --dockerfile ./Dockerfile \
          --build-arg GITHUB_SHA="${{ inputs.pr_sha }}" \
          --build-arg PR_NUMBER="${{ steps.config.outputs.pr_number }}" \
          --wait-timeout 300 \
          --strategy immediate \
          --verbose || {
            echo "Deployment timed out or failed after 10 minutes"
            echo "Checking app status..."
            flyctl status --app "${APP_NAME}" || true
            exit 1
          }
        
        echo "Deployment completed at $(date)"
        
        flyctl status --app "${APP_NAME}"
        flyctl logs --app "${APP_NAME}" --limit 50 || true
        
        echo "Waiting for app to fully initialize..."
        sleep 45
        
        PREVIEW_URL="https://${APP_NAME}.fly.dev"
        echo "Testing app availability at ${PREVIEW_URL}..."
        
        if timeout 120 bash -c "until curl -f -s -m 30 ${PREVIEW_URL} > /dev/null; do echo 'Waiting for response...'; sleep 10; done"; then
          echo "‚úÖ App is responding at ${PREVIEW_URL}"
          echo "deployment_status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è  App deployed but not responding at ${PREVIEW_URL}"
          echo "Checking final app status and logs..."
          flyctl status --app "${APP_NAME}" || true
          flyctl logs --app "${APP_NAME}" --limit 20 || true
          echo "deployment_status=partial" >> $GITHUB_OUTPUT
        fi
    
    - name: Post PR comment with preview link
      if: steps.deploy.outputs.deployment_status == 'success' || steps.deploy.outputs.deployment_status == 'partial'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = ${{ inputs.pr_number }};
          const previewUrl = "${{ steps.config.outputs.preview_url }}";
          const appName = "${{ steps.config.outputs.app_name }}";
          
          const commentBody = `## üöÄ VS Code Extension PR Preview Deployed
          
          Your VS Code extension PR preview has been successfully deployed to Fly.io!
          
          **üåê Preview URL:** ${previewUrl}
          
          **üìã Details:**
          - **App Name:** \`${appName}\`
          - **Build:** \`${{ inputs.pr_sha }}\`
          - **PR:** #${prNumber}
          
          **üîß What's included:**
          - VS Code (code-server) environment
          - Debrief extension pre-installed
          - Sample workspace with test files
          
          **üí° How to use:**
          1. Click the preview URL above
          2. Open any \`.plot.json\` file to test the custom editor
          3. Use Ctrl+Shift+P to access extension commands
          4. Check the Explorer panel for the "Hello World" view
          
          ---
          *This preview will be automatically updated when you push new commits to this PR.*`;
          
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });
          
          const existingComment = comments.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('üöÄ VS Code Extension PR Preview Deployed')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            });
            console.log('Updated existing preview comment');
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
            console.log('Created new preview comment');
          }
    
    - name: Handle deployment failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = ${{ inputs.pr_number }};
          
          const errorComment = `## ‚ùå VS Code Extension PR Preview Deployment Failed
          
          The VS Code extension PR preview deployment encountered an error during the build or deployment process.
          
          **üîß Troubleshooting:**
          - Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed error information
          - Ensure the extension builds successfully locally
          - Verify that all required secrets are configured
          
          **üìã Details:**
          - **PR:** #${prNumber}
          - **Build:** \`${{ inputs.pr_sha }}\`
          - **Run ID:** \`${{ github.run_id }}\`
          
          ---
          *The deployment will retry automatically when you push new commits to this PR.*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: errorComment
          });