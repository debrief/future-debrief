{
  "name": "@debrief/shared-types",
  "version": "1.0.0",
  "description": "Shared types for Debrief ecosystem with constrained GeoJSON FeatureCollections",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist/",
    "schema/",
    "derived/",
    "validators/"
  ],
  "scripts": {
    "clean": "rm -rf derived/typescript/* derived/python/* dist/*",
    "clean:smart": "[ ! -f derived/typescript/featurecollection.ts ] || find schema schemas -newer derived/typescript/featurecollection.ts -print -quit | grep -q . && pnpm clean || echo 'Skipping clean - no schema changes detected'",
    "generate:ts": "NODE_NO_WARNINGS=1 mkdir -p derived/typescript && (NODE_NO_WARNINGS=1 npx json-schema-to-typescript schema/featurecollection.schema.json --cwd schema/ > derived/typescript/featurecollection.ts & NODE_NO_WARNINGS=1 npx json-schema-to-typescript schemas/TimeState.json --cwd schemas/ > derived/typescript/timestate.ts & NODE_NO_WARNINGS=1 npx json-schema-to-typescript schemas/ViewportState.json --cwd schemas/ > derived/typescript/viewportstate.ts & NODE_NO_WARNINGS=1 npx json-schema-to-typescript schemas/SelectionState.json --cwd schemas/ > derived/typescript/selectionstate.ts & NODE_NO_WARNINGS=1 npx json-schema-to-typescript schemas/EditorState.json --cwd schemas/ > derived/typescript/editorstate.ts & wait) && pnpm generate:ts:post-process",
    "generate:ts:post-process": "echo '\\n// Union type for all Debrief feature types\\nexport type DebriefFeature = DebriefTrackFeature | DebriefPointFeature | DebriefAnnotationFeature;' >> derived/typescript/featurecollection.ts && echo '// Re-export from featurecollection to avoid duplication\\nexport { DebriefTrackFeature } from \\\"./featurecollection\\\";' > derived/typescript/track.ts && echo '// Re-export from featurecollection to avoid duplication\\nexport { DebriefPointFeature } from \\\"./featurecollection\\\";' > derived/typescript/point.ts && echo '// Re-export from featurecollection to avoid duplication\\nexport { DebriefAnnotationFeature } from \\\"./featurecollection\\\";' > derived/typescript/annotation.ts",
    "generate:python": "NODE_NO_WARNINGS=1 mkdir -p derived/python && (NODE_NO_WARNINGS=1 quicktype -s schema schema/track.schema.json -o derived/python/track.py --lang python --top-level TrackFeature & NODE_NO_WARNINGS=1 quicktype -s schema schema/point.schema.json -o derived/python/point.py --lang python --top-level PointFeature & NODE_NO_WARNINGS=1 quicktype -s schema schema/annotation.schema.json -o derived/python/annotation.py --lang python --top-level AnnotationFeature & NODE_NO_WARNINGS=1 quicktype -s schema schema/featurecollection.schema.json -o derived/python/featurecollection.py --lang python --top-level DebriefFeatureCollection & NODE_NO_WARNINGS=1 quicktype -s schema schemas/TimeState.json -o derived/python/TimeState.py --lang python --top-level TimeState & NODE_NO_WARNINGS=1 quicktype -s schema schemas/ViewportState.json -o derived/python/ViewportState.py --lang python --top-level ViewportState & NODE_NO_WARNINGS=1 quicktype -s schema schemas/SelectionState.json -o derived/python/SelectionState.py --lang python --top-level SelectionState & NODE_NO_WARNINGS=1 quicktype -s schema schemas/EditorState.json -o derived/python/EditorState.py --lang python --top-level EditorState & wait)",
    "generate:types": "pnpm generate:ts & pnpm generate:python & wait",
    "compile:ts": "npx tsc",
    "build:dist": "pnpm generate:types && mkdir -p dist && pnpm compile:ts",
    "build": "pnpm clean && pnpm build:dist",
    "dev": "npx concurrently \"npx nodemon --watch schema --watch schemas --ext 'json' --exec 'pnpm generate:types'\" \"npx tsc --watch --preserveWatchOutput\"",
    "test:generated": "pnpm test:generated:ts && pnpm test:generated:python",
    "test:generated:ts": "node tests/typescript/test-generated-files.js",
    "test:generated:python": "python3 tests/python/test_generated_files.py",
    "test:validators": "pnpm test:validators:ts && pnpm test:validators:python",
    "test:validators:ts": "node tests/typescript/test-validators.js",
    "test:validators:python": "python3 tests/python/test_validators.py",
    "test:schemas": "pnpm test:schemas:json",
    "test:schemas:json": "node tests/json/test-schemas.js",
    "test": "pnpm test:generated && pnpm test:validators && pnpm test:schemas",
    "eslint": "eslint . --ext .ts",
    "eslint:fix": "eslint . --ext .ts --fix",
    "typecheck": "tsc --noEmit",
    "lint": "pnpm typecheck && pnpm eslint",
    "validate": "pnpm build && pnpm test && pnpm lint",
    "prepublishOnly": "pnpm validate"
  },
  "devDependencies": {
    "@eslint/js": "^9.34.0",
    "ajv": "^8.12.0",
    "ajv-formats": "^2.1.1",
    "concurrently": "^9.2.1",
    "eslint": "^9.34.0",
    "json-schema-to-ts": "^3.1.1",
    "json-schema-to-typescript": "^15.0.4",
    "nodemon": "^3.1.10",
    "quicktype": "^23.2.6",
    "typescript": "^5.9.2",
    "typescript-eslint": "^8.42.0"
  },
  "keywords": [
    "geojson",
    "maritime",
    "debrief",
    "shared-types",
    "typescript",
    "python",
    "json-schema"
  ],
  "author": "Debrief Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/debrief/future-debrief.git",
    "directory": "libs/shared-types"
  },
  "engines": {
    "node": ">=16.0.0"
  }
}
