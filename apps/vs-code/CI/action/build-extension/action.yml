name: 'Build VS Code Extension'
description: 'Build and package VS Code extension'
inputs:
  ref:
    description: 'Git ref to checkout'
    required: false
    default: ''
  artifact_retention_days:
    description: 'Days to retain the artifact'
    required: false
    default: '7'

outputs:
  artifact_name:
    description: 'Name of the uploaded artifact'
    value: 'debrief-vsix'

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.14.0
    
    - name: Setup Python for wheel building
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python build dependencies
      shell: bash
      run: pip install build wheel

    - name: Install global Node.js tools
      shell: bash
      run: npm install -g quicktype

    - name: Install Python dependencies for shared-types
      shell: bash
      run: |
        echo "üêç Installing Python dependencies for shared-types build..."
        pip install -r libs/shared-types/requirements.txt

    - name: Install dependencies
      shell: bash
      run: pnpm install --frozen-lockfile
    
    - name: Build VS Code extension and dependencies
      shell: bash
      run: pnpm build:vs-code

    - name: Install shared-types Python wheel
      shell: bash
      run: |
        echo "üêç Installing shared-types Python wheel for Tool Vault..."
        WHEEL_FILE=$(ls libs/shared-types/dist/*.whl)
        pip install "$WHEEL_FILE"

    - name: Build Tool Vault Package
      shell: bash
      run: |
        echo "üîß Building Tool Vault package..."
        cd libs/tool-vault-packager

        # Install dependencies (uses npm, not pnpm)
        echo "üì¶ Installing Tool Vault dependencies..."
        npm install

        # Install SPA dependencies
        echo "üì¶ Installing SPA dependencies..."
        cd spa && npm install && cd ..

        # Build the toolvault.pyz package
        echo "üèóÔ∏è Building toolvault.pyz..."
        npm run build

        # Verify package was created
        if [ -f dist/toolvault.pyz ]; then
          echo "‚úÖ toolvault.pyz created successfully"
          ls -lh dist/toolvault.pyz
        else
          echo "‚ùå toolvault.pyz build failed"
          exit 1
        fi

    - name: Install vsce
      shell: bash
      working-directory: apps/vs-code
      run: |
        # Install vsce with fallback to local installation
        pnpm add -g @vscode/vsce || pnpm add @vscode/vsce
    
    - name: Package extension
      shell: bash
      working-directory: apps/vs-code
      run: |
        # Package the extension with pnpm workspace compatibility
        # Use --no-dependencies to skip npm list validation since we're using pnpm
        if which vsce > /dev/null 2>&1; then
          vsce package --out vs-code-0.0.1.vsix --no-dependencies
        else
          npx vsce package --out vs-code-0.0.1.vsix --no-dependencies
        fi

        # Verify package was created
        if [ -f vs-code-0.0.1.vsix ]; then
          echo "‚úÖ Extension packaged successfully"
          ls -la *.vsix
        else
          echo "‚ùå Extension packaging failed"
          exit 1
        fi
    
    - name: Upload extension artifact
      uses: actions/upload-artifact@v4
      with:
        name: debrief-vsix
        path: apps/vs-code/vs-code-0.0.1.vsix
        retention-days: ${{ inputs.artifact_retention_days }}