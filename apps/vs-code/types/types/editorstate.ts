/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Union type representing any valid Debrief feature (track, point, or annotation)
 */
export type DebriefFeature = DebriefTrackFeature | DebriefPointFeature | DebriefAnnotationFeature;

/**
 * Aggregated state for a Debrief editor instance containing all sub-state types
 */
export interface EditorState {
  featureCollection?: DebriefFeatureCollection;
  timeState?: TimeState;
  viewportState?: ViewportState;
  selectionState?: SelectionState;
}
/**
 * The GeoJSON FeatureCollection data
 */
export interface DebriefFeatureCollection {
  type: "FeatureCollection";
  features: DebriefFeature[];
  /**
   * Bounding box of the feature collection
   *
   * @minItems 4
   * @maxItems 6
   */
  bbox?:
    | [number, number, number, number]
    | [number, number, number, number, number]
    | [number, number, number, number, number, number];
  properties?: {
    /**
     * Human readable name for this collection
     */
    name?: string;
    /**
     * Description of this feature collection
     */
    description?: string;
    /**
     * When this collection was created
     */
    created?: string;
    /**
     * When this collection was last modified
     */
    modified?: string;
    /**
     * Version of this collection
     */
    version?: string;
    [k: string]: unknown;
  };
}
/**
 * A GeoJSON Feature representing a track with LineString or MultiLineString geometry and optional timestamps
 */
export interface DebriefTrackFeature {
  type: "Feature";
  /**
   * Unique identifier for this feature
   */
  id: string | number;
  geometry:
    | {
        type: "LineString";
        /**
         * @minItems 2
         */
        coordinates: [
          [number, number] | [number, number, number],
          [number, number] | [number, number, number],
          ...([number, number] | [number, number, number])[]
        ];
      }
    | {
        type: "MultiLineString";
        /**
         * @minItems 1
         */
        coordinates: [
          [
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            ...([number, number] | [number, number, number])[]
          ],
          ...[
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            ...([number, number] | [number, number, number])[]
          ][]
        ];
      };
  properties: {
    /**
     * Discriminator to identify this as a track feature
     */
    dataType: "track";
    /**
     * Optional array of timestamps corresponding to each coordinate point
     */
    timestamps?: string[];
    /**
     * Human readable name for this track
     */
    name?: string;
    /**
     * Additional description or notes about this track
     */
    description?: string;
    [k: string]: unknown;
  };
}
/**
 * A GeoJSON Feature representing a point with time properties
 */
export interface DebriefPointFeature {
  type: "Feature";
  /**
   * Unique identifier for this feature
   */
  id: string | number;
  geometry: {
    type: "Point";
    /**
     * @minItems 2
     * @maxItems 3
     */
    coordinates: [number, number] | [number, number, number];
  };
  properties: {
    /**
     * Discriminator to identify this as a reference point feature
     */
    dataType: "reference-point";
    /**
     * Single timestamp for this point
     */
    time?: string;
    /**
     * Start time for a time range
     */
    timeStart?: string;
    /**
     * End time for a time range
     */
    timeEnd?: string;
    /**
     * Human readable name for this point
     */
    name?: string;
    /**
     * Additional description or notes for this point
     */
    description?: string;
    [k: string]: unknown;
  };
}
/**
 * A GeoJSON Feature representing an annotation with any geometry type
 */
export interface DebriefAnnotationFeature {
  type: "Feature";
  /**
   * Unique identifier for this feature
   */
  id: string | number;
  geometry:
    | {
        type: "Point";
        /**
         * @minItems 2
         * @maxItems 3
         */
        coordinates: [number, number] | [number, number, number];
      }
    | {
        type: "LineString";
        /**
         * @minItems 2
         */
        coordinates: [
          [number, number] | [number, number, number],
          [number, number] | [number, number, number],
          ...([number, number] | [number, number, number])[]
        ];
      }
    | {
        type: "Polygon";
        /**
         * @minItems 1
         */
        coordinates: [
          [
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            ...([number, number] | [number, number, number])[]
          ],
          ...[
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            ...([number, number] | [number, number, number])[]
          ][]
        ];
      }
    | {
        type: "MultiPoint";
        coordinates: [number, number] | [number, number, number][];
      }
    | {
        type: "MultiLineString";
        /**
         * @minItems 1
         */
        coordinates: [
          [
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            ...([number, number] | [number, number, number])[]
          ],
          ...[
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            ...([number, number] | [number, number, number])[]
          ][]
        ];
      }
    | {
        type: "MultiPolygon";
        coordinates: [
          [
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            ...([number, number] | [number, number, number])[]
          ],
          ...[
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            [number, number] | [number, number, number],
            ...([number, number] | [number, number, number])[]
          ][]
        ][];
      };
  properties: {
    /**
     * Discriminator to identify this as a zone feature
     */
    dataType: "zone";
    /**
     * Type of annotation
     */
    annotationType?: "label" | "area" | "measurement" | "comment" | "boundary";
    /**
     * Text content of the annotation
     */
    text?: string;
    /**
     * Color code in hex format
     */
    color?: string;
    /**
     * Timestamp when annotation was created
     */
    time?: string;
    /**
     * Human readable name for this annotation
     */
    name?: string;
    /**
     * Additional description or notes about this annotation
     */
    description?: string;
    [k: string]: unknown;
  };
}
/**
 * Current time position state
 */
export interface TimeState {
  /**
   * Current time position as ISO 8601 date-time string
   */
  current: string;
  /**
   * The overall time range of the data, as a [start, end] tuple of ISO 8601 date-time strings
   *
   * @minItems 2
   * @maxItems 2
   */
  range: [string, string];
}
/**
 * Current map viewport bounds state
 */
export interface ViewportState {
  /**
   * Map bounds as [west, south, east, north] in decimal degrees
   *
   * @minItems 4
   * @maxItems 4
   */
  bounds: [number, number, number, number];
}
/**
 * Current feature selection state
 */
export interface SelectionState {
  /**
   * Array of selected feature IDs
   */
  selectedIds: (string | number)[];
}
